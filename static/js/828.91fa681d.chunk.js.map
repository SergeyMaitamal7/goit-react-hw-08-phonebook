{"version":3,"file":"static/js/828.91fa681d.chunk.js","mappings":"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","sources":["components/FormContact/FormContact.styled.js","components/App/App.styled.js","redux/contacts/selector.js","components/FormContact/FormContact.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/RenderContacts/RenderContacts.styled.js","components/RenderContacts/RenderContacts.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\nexport const SubmitForm = styled(Form)`\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\nexport const Label = styled.label`\n  display: block;\n  margin-left: auto;\n  padding: 5px;\n  font-size: 20px;\n`;\nexport const Button = styled.button`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 10px;\n  padding: 10px;\n  font-size: 20px;\n  cursor: pointer;\n  background-color: lightblue;\n  border-radius: 5px;\n  :hover {\n    background-color: aqua;\n  }\n`;\nexport const Input = styled(Field)`\n  width: 350px;\n  padding: 5px;\n  font-size: 16px;\n  border-radius: 4px;\n  cursor: pointer;\n`;\n\nexport const ErrorMessage = styled.div`\n  padding-top: 10px;\n  font-size: 18px;\n  text-align: center;\n  color: red;\n`;\n\nexport const Box = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n  line-height: 0.6;\n  gap: 10px;\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin: 0;\n  padding: 0;\n  margin-top: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 500px;\n  padding: 10px;\n  border-radius: 1px;\n  border: 1px solid aqua;\n  background-color: lightgray;\n`;\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filters;\n","import {\n  Label,\n  Input,\n  Button,\n  SubmitForm,\n  ErrorMessage,\n  Box,\n} from './FormContact.styled';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selector';\nimport { addContact } from 'redux/contacts/operation';\nimport Notiflix from 'notiflix';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport { nanoid } from '@reduxjs/toolkit';\n\nconst schema = Yup.object().shape({\n  name: Yup.string().email().required(),\n  phone: Yup.string().min(6).max(32).required(),\n});\n\nconst initialValues = {\n  name: '',\n  phone: '',\n};\n\nexport default function ContactForm() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = ({ name, phone }) => {\n    const filterName = contacts.find(contact => contact.name === name);\n    if (filterName) {\n      Notiflix.Notify.failure(\n        `You have already added ${name} to Contact list!!!`\n      );\n      return;\n    }\n    dispatch(\n      addContact({\n        id: nanoid(4),\n        name: name,\n        phone: phone,\n      })\n    );\n  };\n\n  const onSubmitInner = (value, { resetForm }) => {\n    onSubmit(value);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validations={schema}\n      onSubmit={onSubmitInner}\n    >\n      {({ errors, touched, isValid, dirty }) => (\n        <SubmitForm>\n          <Label htmlFor=\"name\">name</Label>\n          <Box>\n            <Input id=\"name\" name=\"name\" placeholder=\"Enter Name\" />\n            {errors.name && touched.name && (\n              <ErrorMessage>{errors.name}</ErrorMessage>\n            )}\n          </Box>\n\n          <Label htmlFor=\"phone\">number</Label>\n          <Box>\n            {' '}\n            <Input id=\"phone\" name=\"phone\" placeholder=\"Enter phone number\" />\n            {errors.phone && touched.phone && (\n              <ErrorMessage>{errors.phone}</ErrorMessage>\n            )}\n          </Box>\n          <Button type=\"submit\" disabled={!isValid || !dirty}>\n            Submit\n          </Button>\n        </SubmitForm>\n      )}\n    </Formik>\n  );\n}\nContactForm.propTypes = {\n  name: PropTypes.string,\n  phone: PropTypes.number,\n};\n","import styled from 'styled-components';\nexport const Section = styled.div`\n  display: flex;\n  padding: 20px;\n`;\n\nexport const Title = styled.h2`\n  display: block;\n  text-align: center;\n  margin: 0;\n`;\n","import { Title } from './Section.styled';\nimport PropTypes from 'prop-types';\n\nexport default function Section({ title, children }) {\n  return (\n    <>\n      <Title>{title}</Title>\n      {children}\n    </>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  font-size: 18px;\n`;\n\nexport const Contact = styled.p``;\n","import { Contact } from './Contact.styled';\nimport PropTypes from 'prop-types';\n\nexport default function ItemContact ({ contact }) {\n  return (\n    <>\n      <Contact type=\"button\" name={contact.name}>\n        {contact.name} : {contact.phone}\n      </Contact>\n    </>\n  );\n};\n\nItemContact.prototype = {\n  contacts: PropTypes.objectOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 0;\n`;\nexport const Wrapper = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  font-size: 18px;\n`;\nexport const Button = styled.button`\n  display: inline-block;\n  margin-left: auto;\n  padding: 10px;\n  padding-left: 20px;\n  padding-right: 20px;\n  font-size: 16px;\n  border-radius: 4px;\n  cursor: pointer;\n  background-color: lightblue;\n`;\n","import ItemContact from 'components/Contact/Contact';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact, fetchContacts } from '../../redux/contacts/operation';\nimport { List, Button, Wrapper } from './RenderContacts.styled';\nimport PropTypes from 'prop-types';\nimport { getContacts, getFilter } from 'redux/contacts/selector';\n\nexport default function RenderContacts() {\n  const contacts = useSelector(getContacts);\n  const filters = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filters.toLowerCase())\n  );\n\n  return (\n    <List>\n      {visibleContacts.map(contact => (\n        <Wrapper key={contact.id}>\n          <ItemContact contact={contact}></ItemContact>\n          <Button onClick={() => dispatch(deleteContact(contact.id))}>\n            Delete\n          </Button>\n        </Wrapper>\n      ))}\n    </List>\n  );\n}\n\nRenderContacts.prototype = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n    })\n  ),\n  deleteContact: PropTypes.func,\n};\n","import styled from 'styled-components';\nexport const Title = styled.h2`\n  display: block;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 500;\n`;\nexport const Input = styled.input`\n  display: block;\n  width: 350px;\n  padding: 5px;\n  font-size: 16px;\n  border-radius: 4px;\n  cursor: pointer;\n`;\n","import { Label } from 'components/FormContact/FormContact.styled';\nimport { Title, Input } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const changeFilter = e => {\n    const filter = e.currentTarget.value;\n    dispatch(setFilter(filter));\n  };\n\n  return (\n    <>\n      <Label>\n        <Title>Find contacts by name:</Title>\n        <Input type=\"text\" onChange={changeFilter} />\n      </Label>\n    </>\n  );\n}\n","import { Container } from 'components/App/App.styled';\nimport ContactForm from 'components/FormContact/FormContact';\nimport Section from 'components/Section/Section';\nimport RenderContacts from 'components/RenderContacts/RenderContacts';\nimport Filter from 'components/Filter/Filter';\nexport default function Contacts() {\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <ContactForm></ContactForm>\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <RenderContacts />\n      </Section>\n    </Container>\n  );\n}\n"],"names":["SubmitForm","styled","Form","Label","Button","Input","Field","ErrorMessage","Box","Container","getContacts","state","contacts","items","getFilter","filters","schema","Yup","shape","name","email","required","phone","min","max","initialValues","ContactForm","useSelector","dispatch","useDispatch","validations","onSubmit","value","resetForm","find","contact","Notiflix","addContact","id","nanoid","errors","touched","isValid","dirty","htmlFor","placeholder","type","disabled","Title","Section","title","children","Contact","ItemContact","prototype","PropTypes","number","List","Wrapper","RenderContacts","useEffect","fetchContacts","visibleContacts","filter","toLowerCase","includes","map","onClick","deleteContact","Filter","onChange","e","currentTarget","setFilter","Contacts"],"sourceRoot":""}